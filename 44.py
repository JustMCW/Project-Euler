"""
Pentagon numbers 


Pentagonal numbers are generated by the formula, P = n(3n-1) /2 . The first ten pentagonal numbers are:

1,5,12,22,35,51,70,92,117,145

Adding
P4 + P7 = 22 + 70 = 92 = P8, is pentagonal
difference, D
70-22 = 48 is not pentagonal


Find the pair of pentagonal number, P_j, P_k.
for which their sum and difference is pentagonal, and has the smallest D.

Give your answer in D.
"""


"""
thinking
Again

P = n(3n-1) /2
2P = 3n^2 - n
0 = 3n^2 - n - 2P

n = (1 + √(1 + 24P)) /6, n>0
6n - 1 = √(1 + 24P)

P=1, n=1
P=2, n= No integer solution
P=5, n=2

sum and difference

suppose P_i > P_j.

n,m,k,j are non zero, intergers

P_i + P_j =  n(3n-1) /2 + m(3m-1) /2 = k(3k-1) / 2 
P_i - P_j =  n(3n-1) /2 - m(3m-1) /2 = j(3j-1) / 2

2(P_i + P_j) =  3n^2 -n + 3m^2 -m = 
2(P_i - P_j) =  3n^2 -n - 3m^2 -m

n(3n-1) + m(3m-1) = k(3k-1) 
n(3n-1) - m(3m-1) = j(3j-1) <= minimised


2n(3n-1) = k(3k-1) + j(3j-1)


Minimise:
2n(3n-1) - k(3k-1)
 =  j(3j-1)

 
P_i = 1,5,12,22,35,51,70,92,117,145... n(3n-1) / 2 

∆_P_i = 4,7,10,13,11,19,22... (3n+1)

∆∆P_i = 3

6k + 2 = 3n^2 - n
6k = 3n^2 - n - 2
6k = (n + 1)(3n-2)
"""

"""
DIFFERENT APPROACH;

D, the difference, |P_i - P_j| is a pentagonal number, and has to be minimised

so we should work from the bottom of the pentagonls : 1,5,22,35,51
and check if its possible that it is a difference of 2 pentagonal, and if the sum is also pentagonal

Checking if its difference of 2 pentagonals, that are not nesscirily consecutive.

if it can be expressed as 3n + 1, it is consecutive.
if not...

we can perhaps use  arthmetic series to represent the change of the pentagonals

P = 1,5,12,22,35,51,70,92 ...
∆P = 4,7,10,13,16,19,22,25 ... 

Given by 3n+1, for the difference of T_(n+1) - T_n.
and since i-j doesnt have to have an magnitude of one, we beed to check the sum from a random starting point to an endpoint

lets ignore starting point.
where is the end point, tho?

lets take D=35
we dont look at ∆P > 35
when ∆P = 37 or greater, n >= 12 or n <= 11

n <= D - 1 // 3
"""


from math import sqrt
import itertools


def is_pentagonal(n : int):
    sr = sqrt(1+24*n)
    return sr.is_integer() and (sr+1)%6==0


def pentagonal_generator():
    p = 0
    for i in itertools.count():
        p += 3*i + 1
        yield p


class AutoExtendingPentagonals(list):
    pen_gen = pentagonal_generator()

    def extend_until_long_enough(self,n:int):
        while len(self) <= n:
            self.append(next(self.pen_gen))

    def __getitem__(self, __value: int) -> bool:
        try:
            return super().__getitem__(__value)
        except IndexError:
            self.extend_until_long_enough(__value)
            return super().__getitem__(__value)
    
    def extend_until_big_enough(self,n:int):
        while self[-1] <= n:
            self.append(next(self.pen_gen))

    def __contains__(self, __key: int) -> bool:
        if __key > self[-1]:
            self.extend_until_big_enough(__key)
        return super().__contains__(__key)

pentagonals = AutoExtendingPentagonals()
pentagonals.extend_until_long_enough(100)

def is_pentagonal_difference(D : int):
    if D ==1 : 
        return False,0
    
    if (D-1)%3 ==0:
        n = (D-1) // 3 # the index indicating the difference ?
        return pentagonals[n-1], pentagonals[n]

    endpoint = (D-1) // 3 # inclusive

    deltaPs = range(4,3*endpoint + 4,3)

    for r in range(1,endpoint+1):
        for i in range(endpoint-r):
            s = sum(deltaPs[i:i+r+1])
            if s == D:
                
                return pentagonals[i],pentagonals[i+r+1]
            elif s > D:
                break

    return False,0

def main():
    # met1
    # try:
    #     for D in pentagonal_generator():
    #         P_j, P_k = is_pentagonal_difference(D)
    #         if not P_j: continue

    #         print(f"{D} + {P_j} = {P_k}")

    #         if P_j + P_k in pentagonals:
    #             print(P_j,P_k,D)
    #             break

            
            
    # except KeyboardInterrupt:
    #     print(len(pentagonals))
    #     print(pentagonals[-1])
    for i, pen in enumerate(pentagonal_generator()):
        print(i,pen)
        for S in pentagonals:
            if S == pen: continue
            if S >= 2*pen:
                break
            D = ((2*pen) - S)

            # if D >= pen:
            #     continue
            # print(D,S,pen,pen-D)
            # print(pen,D)
            P_j = S-pen
            if D in pentagonals and P_j in pentagonals:
                print()
                print(S,D,is_pentagonal(S),is_pentagonal(D),S in pentagonals, D in pentagonals)
                print(pen,P_j,is_pentagonal(pen),is_pentagonal(P_j))
                break
        # if i>10: break

def PE044(c=1): # c : how many wants you ?
  i = D = 0
  while c:
    D+=3*i+1 ; i+=1 ; Pd = 0
    for d in range(1, i):
      Pd += 3*d-2
      j, r = divmod(D-Pd, 3*d)
      if (not r) and not (1+sqrt(1+24*(j*(3*j-1)+D)))%6:
        print(D)
        c-=1

if __name__=="__main__": 
    PE044()
    # main()